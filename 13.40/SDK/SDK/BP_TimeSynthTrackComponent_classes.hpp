#pragma once

/*
* SDK generated by Dumper-8
*
* https://github.com/NotTacs/Dumper-8
*/

// Package: BP_TimeSynthTrackComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TimeSynth_structs.hpp"
#include "TimeSynth_TrackStemData_structs.hpp"
#include "TimeSynth_TrackMixState_structs.hpp"
#include "TimeSynth_TransitionData_structs.hpp"
#include "TimeSynth_TrackPlayStates_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TimeSynthTrackComponent.BP_TimeSynthTrackComponent_C
// 0x00F0 (0x01A0 - 0x00B0)
class UBP_TimeSynthTrackComponent_C : public UFortTimeSynthTrackComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Enabled;                                           // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-8 ])
	class FName                                   TrackID;                                           // 0x00BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-8 ])
	class ABP_TimeSynthController_Base_C*         TimeSynthController;                               // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TrackLengthBeats;                                  // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimeSynthQuantizationSettings         QuantizationSettings;                              // 0x00D4(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TArray<struct FTimeSynth_TrackStemData>       Clips;                                             // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         CurrentBeatDecrement;                              // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-8 ])
	struct FTimeSynth_TrackStemData               StopClip;                                          // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FTimeSynth_TransitionData> Transitions;                                 // 0x0110(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FTimeSynthClipHandle>           Handles;                                           // 0x0160(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          QuantizationEventBound;                            // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugEnabled;                                      // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ETimeSynth_TrackPlayStates                    PlayState;                                         // 0x0172(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_173[0x1];                                      // 0x0173(0x0001)(Fixing Size After Last Property [ Dumper-8 ])
	int32                                         CurrentBeat;                                       // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(ETimeSynth_TrackPlayStates Previous, ETimeSynth_TrackPlayStates New)> OnPlayStateChanged; // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FTimeSynth_TrackMixState>       TrackMixStates;                                    // 0x0188(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         PriorityWeight;                                    // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_TimeSynthTrackComponent(int32 EntryPoint);
	void ReceiveBeginPlay();
	void SetTimeSynthController(class ABP_TimeSynthController_Base_C* TimeSynthController_0);
	void QueueTrackStart(bool Is_First_Track);
	void QueueTrackStop(bool Play_Outro);
	void LoopCurrentTrack();
	void CalculateMaxClipDuration(TArray<struct FTimeSynth_TrackStemData>& Clips_0, int32* Duration);
	void HasTransitionForTrack(class FName TrackID_0, bool* Transition_Found, struct FTimeSynth_TransitionData* Transition_Data);
	void OnQuantizationBeat(ETimeSynthEventQuantization QuantizationType, int32 NumBars, float Beat);
	void CheckPlaystate(ETimeSynth_TrackPlayStates Is_In_Play_State, bool* Result);
	void SetPlaystate(ETimeSynth_TrackPlayStates Is_In_Play_State);
	void OnQuantizationBar(ETimeSynthEventQuantization QuantizationType, int32 NumBars, float Beat);
	void GetTimeSynthController(class ABP_TimeSynthController_Base_C** TimeSynthController_0);
	void GetIsEnabled(bool* Enabled_0);
	void GetTrackID(class FName* TrackID_0);
	void GetQuantizationSettings(struct FTimeSynthQuantizationSettings* QuantizationSettings_0);
	void GetMaxClipDuration(int32* MaxClipDuration);
	void FindMixState(class FName Name_0, int32* Array_Index);
	void SetMixStateVolume(class FName MixStateName, float Volume);
	void GetPriority(float* Priority);
	void GetMixStateIndexFromName(class FName Name_0, int32* Array_Index);
	void SetMixStateVolumeByIndex(int32 Index_0, float Volume);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TimeSynthTrackComponent_C">();
	}
	static class UBP_TimeSynthTrackComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_TimeSynthTrackComponent_C>();
	}
};

}

